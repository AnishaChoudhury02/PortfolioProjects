--SQL coding
CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);

CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

-- Corporate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);
INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);


SELECT * FROM employee;
SELECT * FROM client;
SELECT * FROM branch;
SELECT * FROM works_with;
SELECT * FROM branch_supplier;

--ASSIGN DIFF TITLE NAME
SELECT first_name AS forname, last_name AS surname
FROM employee;

--select all the genders
SELECT DISTINCT sex
FROM employee;

--FIND THE NO. OF EMPLOYEES
SELECT COUNT (emp_id)
FROM employee; 

--count female employees born after 1970
SELECT COUNT (emp_id)
FROM employee
WHERE sex='F' AND birth_day>'1971-01-01'; 

-- find the avg of male employee salaries
SELECT AVG (salary)
FROM employee
WHERE sex='M';

--Find out how many males and females there are
SELECT COUNT(sex), sex
FROM employee
GROUP BY sex;

--find the total sales of each salesman
SELECT SUM(total_sales), emp_id
from works_with
GROUP BY emp_id;

--find clients in/ends with LLC
SELECT * 
FROM client 
WHERE client_name LIKE '%LLC'; 

 --find any branch suppliers who are in label business
 SELECT *
 FROM branch_supplier
 WHERE supplier_name LIKE '% Label%';

 --find any employee born in october
SELECT * 
FROM employee 
WHERE birth_day LIKE '____-10%'; 

--find any clients who are schools
SELECT * 
FROM client 
WHERE client_name LIKE '%school%'; 

--find list of employess and branch name
SELECT first_name AS company_names
FROM employee 
UNION
SELECT branch_name
FROM branch;

-- JOIN
--find all branches and the names of their managers
INSERT INTO branch VALUES (4,'BUFFALO',null, null);
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id = mgr_id;

--LEFT JOIN: all employee (all rows on left most side: employee tablr)
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
LEFT JOIN branch
ON employee.emp_id = mgr_id;

--RIGHT JOIN: all employee (all rows on right most side: branch table)
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id = mgr_id;
--Find names all employees who have sold over 30000 to a single client
SELECT employee.first_name , employee.last_name
FROM employee 
WHERE employee.emp_id IN (
SELECT works_with.emp_id
FROM works_with
WHERE works_with.total_sales > 30000
);

-- find all the clients who are handled by the branch that michael scott manages. assume you knowmichaels ID
-- first find the name/branch id of the branch he handles
SELECT client_name
FROM client  
WHERE branch_id = (SELECT branch_id FROM branch WHERE mgr_id = 102
LIMIT 1 --to make sure that incase he handles multiple branches, only one shows. If i want all use IN
);

-- write a SQL query to find those employees who receive a higher salary than the employee with ID 106. Return first name, last name.
SELECT first_name, last_name
FROM employee
WHERE salary > (SELECT salary
FROM employee
WHERE emp_id = 106);

--find out which employees have the same designation as the employee ID 105. Return first name, last name, branch id.
SELECT first_name, last_name, branch_id
FROM employee
WHERE branch_id IN (SELECT branch_id
FROM employee
WHERE emp_id=105);
--find those employees whose salary matches the lowest salary of any of the branch. Return first name, last name and branch ID.
SELECT MIN(salary)
FROM employee; 

SELECT first_name, last_name, branch_id
FROM employee
WHERE salary IN (SELECT MIN(salary)
FROM employee
GROUP BY branch_id);
-- find those employees who earn more than the average salary. Return employee ID, first name, last name.
SELECT  emp_ID, first_name, last_name
FROM employee
WHERE salary >(SELECT avg(salary)
FROM employee);

--find those employees whose salary is in the range of 70000, and 75000. Return all the fields
SELECT *
FROM employee
WHERE salary BETWEEN 70000 AND 75000;

--find those employees whose salary falls within the range of the smallest salary and 70000. Return all the fields.
SELECT *
FROM employee
WHERE salary BETWEEN 
(SELECT min(salary)
FROM employee) AND 75000; 

--find those employees who get second-highest salary. Return all the fields of the employees.
SELECT *
FROM employee
WHERE emp_id IN(SELECT emp_id
FROM employee
WHERE salary =(SELECT MAX (salary)
FROM employee 
WHERE salary < (SELECT MAX(salary)
FROM employee)));

--find  employees who work in a department where there are employees with first name contains the letter 'T'. Return employee ID, first name and last name.
SELECT first_name, last_name, emp_id
FROM employee
WHERE branch_id IN (SELECT branch_id
FROM employee
WHERE first_name LIKE '%T%');

-- find those employees who earn more than the average salary and work in the same department as an employee whose first name contains the letter 'J'. Return employee ID, first name and salary.
SELECT branch_id
FROM employee
WHERE salary > (SELECT AVG(salary)
FROM employee);

SELECT branch_id
FROM employee
WHERE first_name LIKE '%J%';

SELECT branch_id, first_name, salary
FROM employee
WHERE branch_id IN (SELECT branch_id
FROM employee
WHERE salary > (SELECT AVG(salary)
FROM employee)) AND branch_id IN
(SELECT branch_id
FROM employee
WHERE first_name LIKE '%J%'); 

--find those employees whose branch is located at 'Scranton'. Return first name, last name, employee ID, job ID.
SELECT emp_id, first_name, last_name 
FROM employee
WHERE emp_id = (SELECT mgr_id
FROM branch
WHERE branch_name= 'Scranton')
;

-- calculate total salary of the departments where at least one employee works. Return department ID, total salary.
SELECT SUM(salary) , branch_id
FROM employee
GROUP BY branch_id;

--  find the client and supplier who reside in the same branch. Return Salesman, cust_name and branch.
SELECT client_name AS 'Names', supplier_name
FROM client
JOIN branch_supplier
ON client.branch_id = branch_supplier.branch_id;
SELECT client_name, supplier_name
FROM client, branch_supplier
WHERE client.branch_id = branch_supplier.branch_id;

--find those orders where the sales amount exists between 10000 and 50000. Return client_id, total_sales, client_name, branch_id.
SELECT total_sales, client_id, branch_id
FROM works_with
WHERE total_sales BETWEEN 10000 AND 50000
JOIN client_name
ON client.client_id = works_with.client_id;
